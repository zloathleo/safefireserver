/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcService_H
#define RpcService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "RPCService_types.h"

namespace powermax { namespace rpc {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RpcServiceIf {
 public:
  virtual ~RpcServiceIf() {}
  virtual void ping(SimpleReturn& _return) = 0;
  virtual void sendDoubleData(SimpleReturn& _return, const std::vector<DoubleValue> & doubleValue) = 0;
};

class RpcServiceIfFactory {
 public:
  typedef RpcServiceIf Handler;

  virtual ~RpcServiceIfFactory() {}

  virtual RpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RpcServiceIf* /* handler */) = 0;
};

class RpcServiceIfSingletonFactory : virtual public RpcServiceIfFactory {
 public:
  RpcServiceIfSingletonFactory(const boost::shared_ptr<RpcServiceIf>& iface) : iface_(iface) {}
  virtual ~RpcServiceIfSingletonFactory() {}

  virtual RpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RpcServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RpcServiceIf> iface_;
};

class RpcServiceNull : virtual public RpcServiceIf {
 public:
  virtual ~RpcServiceNull() {}
  void ping(SimpleReturn& /* _return */) {
    return;
  }
  void sendDoubleData(SimpleReturn& /* _return */, const std::vector<DoubleValue> & /* doubleValue */) {
    return;
  }
};


class RpcService_ping_args {
 public:

  RpcService_ping_args(const RpcService_ping_args&);
  RpcService_ping_args& operator=(const RpcService_ping_args&);
  RpcService_ping_args() {
  }

  virtual ~RpcService_ping_args() throw();

  bool operator == (const RpcService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_ping_pargs {
 public:


  virtual ~RpcService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_ping_result__isset {
  _RpcService_ping_result__isset() : success(false) {}
  bool success :1;
} _RpcService_ping_result__isset;

class RpcService_ping_result {
 public:

  RpcService_ping_result(const RpcService_ping_result&);
  RpcService_ping_result& operator=(const RpcService_ping_result&);
  RpcService_ping_result() {
  }

  virtual ~RpcService_ping_result() throw();
  SimpleReturn success;

  _RpcService_ping_result__isset __isset;

  void __set_success(const SimpleReturn& val);

  bool operator == (const RpcService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_ping_presult__isset {
  _RpcService_ping_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_ping_presult__isset;

class RpcService_ping_presult {
 public:


  virtual ~RpcService_ping_presult() throw();
  SimpleReturn* success;

  _RpcService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_sendDoubleData_args__isset {
  _RpcService_sendDoubleData_args__isset() : doubleValue(false) {}
  bool doubleValue :1;
} _RpcService_sendDoubleData_args__isset;

class RpcService_sendDoubleData_args {
 public:

  RpcService_sendDoubleData_args(const RpcService_sendDoubleData_args&);
  RpcService_sendDoubleData_args& operator=(const RpcService_sendDoubleData_args&);
  RpcService_sendDoubleData_args() {
  }

  virtual ~RpcService_sendDoubleData_args() throw();
  std::vector<DoubleValue>  doubleValue;

  _RpcService_sendDoubleData_args__isset __isset;

  void __set_doubleValue(const std::vector<DoubleValue> & val);

  bool operator == (const RpcService_sendDoubleData_args & rhs) const
  {
    if (!(doubleValue == rhs.doubleValue))
      return false;
    return true;
  }
  bool operator != (const RpcService_sendDoubleData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_sendDoubleData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_sendDoubleData_pargs {
 public:


  virtual ~RpcService_sendDoubleData_pargs() throw();
  const std::vector<DoubleValue> * doubleValue;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_sendDoubleData_result__isset {
  _RpcService_sendDoubleData_result__isset() : success(false) {}
  bool success :1;
} _RpcService_sendDoubleData_result__isset;

class RpcService_sendDoubleData_result {
 public:

  RpcService_sendDoubleData_result(const RpcService_sendDoubleData_result&);
  RpcService_sendDoubleData_result& operator=(const RpcService_sendDoubleData_result&);
  RpcService_sendDoubleData_result() {
  }

  virtual ~RpcService_sendDoubleData_result() throw();
  SimpleReturn success;

  _RpcService_sendDoubleData_result__isset __isset;

  void __set_success(const SimpleReturn& val);

  bool operator == (const RpcService_sendDoubleData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_sendDoubleData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_sendDoubleData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_sendDoubleData_presult__isset {
  _RpcService_sendDoubleData_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_sendDoubleData_presult__isset;

class RpcService_sendDoubleData_presult {
 public:


  virtual ~RpcService_sendDoubleData_presult() throw();
  SimpleReturn* success;

  _RpcService_sendDoubleData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RpcServiceClient : virtual public RpcServiceIf {
 public:
  RpcServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(SimpleReturn& _return);
  void send_ping();
  void recv_ping(SimpleReturn& _return);
  void sendDoubleData(SimpleReturn& _return, const std::vector<DoubleValue> & doubleValue);
  void send_sendDoubleData(const std::vector<DoubleValue> & doubleValue);
  void recv_sendDoubleData(SimpleReturn& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RpcServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RpcServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RpcServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendDoubleData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RpcServiceProcessor(boost::shared_ptr<RpcServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RpcServiceProcessor::process_ping;
    processMap_["sendDoubleData"] = &RpcServiceProcessor::process_sendDoubleData;
  }

  virtual ~RpcServiceProcessor() {}
};

class RpcServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RpcServiceProcessorFactory(const ::boost::shared_ptr< RpcServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RpcServiceIfFactory > handlerFactory_;
};

class RpcServiceMultiface : virtual public RpcServiceIf {
 public:
  RpcServiceMultiface(std::vector<boost::shared_ptr<RpcServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RpcServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RpcServiceIf> > ifaces_;
  RpcServiceMultiface() {}
  void add(boost::shared_ptr<RpcServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(SimpleReturn& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return);
    }
    ifaces_[i]->ping(_return);
    return;
  }

  void sendDoubleData(SimpleReturn& _return, const std::vector<DoubleValue> & doubleValue) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendDoubleData(_return, doubleValue);
    }
    ifaces_[i]->sendDoubleData(_return, doubleValue);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RpcServiceConcurrentClient : virtual public RpcServiceIf {
 public:
  RpcServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(SimpleReturn& _return);
  int32_t send_ping();
  void recv_ping(SimpleReturn& _return, const int32_t seqid);
  void sendDoubleData(SimpleReturn& _return, const std::vector<DoubleValue> & doubleValue);
  int32_t send_sendDoubleData(const std::vector<DoubleValue> & doubleValue);
  void recv_sendDoubleData(SimpleReturn& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
