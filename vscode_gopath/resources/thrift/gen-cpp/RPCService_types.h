/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RPCService_TYPES_H
#define RPCService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace powermax { namespace rpc {

class DoubleValue;

class SimpleReturn;

typedef struct _DoubleValue__isset {
  _DoubleValue__isset() : tag(false), tm(false), status(false), value(false) {}
  bool tag :1;
  bool tm :1;
  bool status :1;
  bool value :1;
} _DoubleValue__isset;

class DoubleValue {
 public:

  DoubleValue(const DoubleValue&);
  DoubleValue& operator=(const DoubleValue&);
  DoubleValue() : tag(), tm(0), status(0), value(0) {
  }

  virtual ~DoubleValue() throw();
  std::string tag;
  int64_t tm;
  int32_t status;
  double value;

  _DoubleValue__isset __isset;

  void __set_tag(const std::string& val);

  void __set_tm(const int64_t val);

  void __set_status(const int32_t val);

  void __set_value(const double val);

  bool operator == (const DoubleValue & rhs) const
  {
    if (!(tag == rhs.tag))
      return false;
    if (!(tm == rhs.tm))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DoubleValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DoubleValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DoubleValue &a, DoubleValue &b);

inline std::ostream& operator<<(std::ostream& out, const DoubleValue& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SimpleReturn__isset {
  _SimpleReturn__isset() : code(false), msg(false) {}
  bool code :1;
  bool msg :1;
} _SimpleReturn__isset;

class SimpleReturn {
 public:

  SimpleReturn(const SimpleReturn&);
  SimpleReturn& operator=(const SimpleReturn&);
  SimpleReturn() : code(), msg() {
  }

  virtual ~SimpleReturn() throw();
  std::string code;
  std::string msg;

  _SimpleReturn__isset __isset;

  void __set_code(const std::string& val);

  void __set_msg(const std::string& val);

  bool operator == (const SimpleReturn & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const SimpleReturn &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleReturn & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleReturn &a, SimpleReturn &b);

inline std::ostream& operator<<(std::ostream& out, const SimpleReturn& obj)
{
  obj.printTo(out);
  return out;
}

}} // namespace

#endif
